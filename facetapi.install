<?php

/**
 * @file
 * Install, update, and uninstall functions for the Facet API module.
 */

/**
 * Implements hook_schema().
 */
function facetapi_schema() {
  $schema['facetapi'] = array(
    'description' => 'Facet configurations.',
    'export' => array(
      'key' => 'name',
      'identifier' => 'facet',
      'default hook' => 'facetapi_default_facet_settings',
      'api' => array(
        'owner' => 'facetapi',
        'api' => 'facetapi_defaults',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'name' => array(
        'description' => 'The machine readable name of the configuration.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'searcher' => array(
        'description' => 'The machine readable name of the searcher.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'realm' => array(
        'description' => 'The machine readable name of the realm.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'facet' => array(
        'description' => 'The machine readable name of the facet.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'enabled' => array(
        'description' => 'Whether the facet is enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'hash' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '0',
        'description' => 'Unique hash ID for facet.',
      ),
      'settings' => array(
        'description' => 'Serialized storage of general settings.',
        'type' => 'blob',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('name'),
  );
  return $schema;
}

/**
 * Implements hook_install().
 */
function facetapi_install() { }

/**
 * Implements hook_uninstall().
 */
function facetapi_uninstall() {
  // Remove blocks.
  if (db_table_exists('block')) {
    db_delete('block')->condition('module', 'facetapi')->execute();
  }
}

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function facetapi_update_7000() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function facetapi_update_7001() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function facetapi_update_7002() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function facetapi_update_7101() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function facetapi_update_7102() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function facetapi_update_7103() { }

// TODO The old hook_update_N functions cannot be applied to Backdrop.
function facetapi_update_7104() { }

/**
 * Implements hook_update_last_removed().
 */
function facetapi_update_last_removed() {
  return 7104;
}

/**
 * Implements hook_update_N().
 */
function facetapi_update_1000() {
  $config = config('facetapi.settings');
  $config->set('facetapi:translator_module', update_variable_get('facetapi:translator_module', 'NULL'));
  $config->save();
  update_variable_del('facetapi:block_cache:searcher');
  update_variable_del('facetapi:translator_module');
}
